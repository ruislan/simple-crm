generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  password  String
  phone     String   @unique
  email     String   @unique
  isAdmin   Boolean  @default(false) @map("is_admin")
  isLocked  Boolean  @default(false) @map("is_locked")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  Link Link[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String?
  phone     String?
  type      String?
  province  String?
  city      String?
  area      String?
  adcode    String? // 国际行政区划数字
  address   String?
  location  String?
  source    String   @default("unknown") // 来源：unknown,gaode,baidu,web,email,phone,introduce
  sourceId  String?  @map("source_id") // 来源的ID
  isCompany Boolean  @default(false) @map("is_company")
  stageId   Int?     @map("stage_id")
  userId    Int?     @map("user_id") // 负责人
  creatorId Int?     @map("creator_id") // 创建人
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ref
  photos Photo[]
  tags   CustomerTagRef[]
  stage  Stage?           @relation(fields: [stageId], references: [id])
}

// 虽然是关系表，但是不需要建立N*M关系约束
model UserCustomerHiddenRef {
  customerId Int @map("customer_id")
  userId     Int @map("user_id")

  @@id([customerId, userId])
}

// 客户情况：未联系（默认）, 加微信未通过, 添加微信成功, 下单, 暂时未接通
model Stage {
  id        Int        @id @default(autoincrement())
  name      String
  sequence  Int
  colorHex  String?    @map("color_hex")
  isFinal   Boolean    @default(false) @map("is_final")
  deletable Boolean    @default(true)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  // ref
  customers Customer[]
}

// 客户图片
model Photo {
  id         Int     @id @default(autoincrement())
  url        String?
  customerId Int     @map("customer_id")

  // ref
  customer Customer @relation(fields: [customerId], references: [id])
}

// 客户标签
model Tag {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  colorHex  String?          @map("color_hex")
  // ref
  customers CustomerTagRef[]
}

// 标签与客户的多对多关系
model CustomerTagRef {
  customerId Int      @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])
  tagId      Int      @map("tag_id")
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([customerId, tagId])
}

// 一次接触
model Link {
  id         Int      @id @default(autoincrement())
  subject    String
  content    String
  userId     Int      @map("user_id") // 接触执行人
  user       User     @relation(fields: [userId], references: [id])
  customerId Int      @map("customer_id") // 接触客户
  typeId     Int      @map("type_id") // 接触类别
  type       LinkType @relation(fields: [typeId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

// 接触类型 email（邮件）, phone（电话）, wechat（微信），video（视频） ...
model LinkType {
  id        Int     @id @default(autoincrement())
  name      String
  deletable Boolean @default(true)
  links     Link[]
}

// 所有活动，谁做了什么事情
model Activity {
  id       Int    @id @default(autoincrement())
  template String // 什么事儿，简单模板，例如：给{{customer.name}}打了一个电话
  data     String // 模板数据，JSON格式（如果数据库支持的话）e.g { "customer": { "name": "张三"} }
  action   String // 动作
  userId   Int    @map("user_id") // 谁

  createdAt DateTime @default(now()) @map("created_at")
}
